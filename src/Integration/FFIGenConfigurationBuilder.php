<?php

declare(strict_types=1);

namespace Yangweijie\CWrapper\Integration;

use Yangweijie\CWrapper\Config\ConfigInterface;
use Yangweijie\CWrapper\Exception\ConfigurationException;

/**
 * Builds klitsche/ffigen YAML configuration from ProjectConfig
 */
class FFIGenConfigurationBuilder
{
    /**
     * Build klitsche/ffigen configuration array from ProjectConfig
     *
     * @param ConfigInterface $config Project configuration
     * @return array<string, mixed> FFIGen configuration array
     * @throws ConfigurationException If configuration is invalid
     */
    public function buildConfiguration(ConfigInterface $config): array
    {
        $this->validateConfiguration($config);

        $ffiGenConfig = [
            'headers' => $this->buildHeadersConfiguration($config),
            'library' => $this->buildLibraryConfiguration($config),
            'output' => $this->buildOutputConfiguration($config),
            'namespace' => $this->buildNamespaceConfiguration($config),
        ];

        // Add exclude patterns if provided
        if (!empty($config->getExcludePatterns())) {
            $ffiGenConfig['exclude'] = $config->getExcludePatterns();
        }

        return $ffiGenConfig;
    }

    /**
     * Generate YAML configuration string for klitsche/ffigen
     *
     * @param ConfigInterface $config Project configuration
     * @return string YAML configuration string
     * @throws ConfigurationException If configuration is invalid
     */
    public function buildYamlConfiguration(ConfigInterface $config): string
    {
        $configArray = $this->buildConfiguration($config);
        
        // Convert array to YAML format manually since we want specific formatting
        $yaml = "# FFIGen Configuration\n";
        $yaml .= "# Generated by C-to-PHP FFI Converter\n\n";
        
        $yaml .= "headers:\n";
        foreach ($configArray['headers'] as $header) {
            $yaml .= "  - \"" . addslashes($header) . "\"\n";
        }
        
        $yaml .= "\nlibrary:\n";
        $yaml .= "  file: \"" . addslashes($configArray['library']['file']) . "\"\n";
        
        $yaml .= "\noutput:\n";
        $yaml .= "  directory: \"" . addslashes($configArray['output']['directory']) . "\"\n";
        $yaml .= "  constants_file: \"" . addslashes($configArray['output']['constants_file']) . "\"\n";
        $yaml .= "  methods_file: \"" . addslashes($configArray['output']['methods_file']) . "\"\n";
        
        $yaml .= "\nnamespace: \"" . addslashes($configArray['namespace']) . "\"\n";
        
        if (isset($configArray['exclude']) && !empty($configArray['exclude'])) {
            $yaml .= "\nexclude:\n";
            foreach ($configArray['exclude'] as $pattern) {
                $yaml .= "  - \"" . addslashes($pattern) . "\"\n";
            }
        }
        
        return $yaml;
    }

    /**
     * Validate the project configuration for FFIGen compatibility
     *
     * @param ConfigInterface $config Project configuration
     * @throws ConfigurationException If configuration is invalid
     */
    private function validateConfiguration(ConfigInterface $config): void
    {
        if (empty($config->getHeaderFiles())) {
            throw new ConfigurationException('At least one header file must be specified');
        }

        foreach ($config->getHeaderFiles() as $headerFile) {
            if (!is_string($headerFile) || empty(trim($headerFile))) {
                throw new ConfigurationException('Header file paths must be non-empty strings');
            }
        }

        if (empty(trim($config->getLibraryFile()))) {
            throw new ConfigurationException('Library file must be specified');
        }

        if (empty(trim($config->getOutputPath()))) {
            throw new ConfigurationException('Output path must be specified');
        }

        if (empty(trim($config->getNamespace()))) {
            throw new ConfigurationException('Namespace must be specified');
        }
    }

    /**
     * Build headers configuration section
     *
     * @param ConfigInterface $config Project configuration
     * @return array<string> Header file paths
     */
    private function buildHeadersConfiguration(ConfigInterface $config): array
    {
        return array_map('realpath', array_filter($config->getHeaderFiles(), function ($path) {
            return file_exists($path);
        })) ?: $config->getHeaderFiles(); // Fallback to original paths if realpath fails
    }

    /**
     * Build library configuration section
     *
     * @param ConfigInterface $config Project configuration
     * @return array<string, string> Library configuration
     */
    private function buildLibraryConfiguration(ConfigInterface $config): array
    {
        $libraryFile = $config->getLibraryFile();
        
        // Use realpath if file exists, otherwise use original path
        $resolvedPath = file_exists($libraryFile) ? realpath($libraryFile) : $libraryFile;
        
        return [
            'file' => $resolvedPath ?: $libraryFile,
        ];
    }

    /**
     * Build output configuration section
     *
     * @param ConfigInterface $config Project configuration
     * @return array<string, string> Output configuration
     */
    private function buildOutputConfiguration(ConfigInterface $config): array
    {
        $outputPath = rtrim($config->getOutputPath(), '/\\');
        
        return [
            'directory' => $outputPath,
            'constants_file' => $outputPath . '/constants.php',
            'methods_file' => $outputPath . '/Methods.php',
        ];
    }

    /**
     * Build namespace configuration
     *
     * @param ConfigInterface $config Project configuration
     * @return string Namespace for generated code
     */
    private function buildNamespaceConfiguration(ConfigInterface $config): string
    {
        $namespace = trim($config->getNamespace(), '\\');
        
        // Ensure namespace follows PSR-4 conventions
        return str_replace('/', '\\', $namespace);
    }
}